## Bandit Level 0
## Level Goal
The goal of this level is for you to log into the game using SSH. The host to which you need to connect is bandit.labs.overthewire.org, on port 2220. The username is bandit0 and the password is bandit0. Once logged in, go to the Level 1 page to find out how to beat Level 1.
```
ssh bandit0@bandit.labs.overthewire.org -p 2220
```

## Bandit Level 0 → Level 1
## Level Goal
The password for the next level is stored in a file called readme located in the home directory. Use this password to log into bandit1 using SSH. Whenever you find a password for a level, use SSH (on port 2220) to log into that level and continue the game.
```
ls
```
```
cat readme
```


Bandit Level 1 → Level 2
Level Goal
The password for the next level is stored in a file called — located in the home directory

learnings
ls -a

Lists all files, including hidden ones.
Output: -, ., .., and shell config files.
cat < -

Reads input from the file named - using redirection.
Output: 263JGJPfgU6LtdEvgfWU1XP5yac29mFx.
cat ./-

Explicitly refers to the file - using ./.
Output: Same as above.
Key Points
Special filenames: Use ./ to handle files like - that resemble options.

Redirection (<): Reads file input for commands.

Hidden files: Use ls -a to view files starting with ..

Both cat < - and cat ./- display the same content but differ in handling.

cat < -: Uses input redirection; - is treated as a file to read input from.

cat ./-: Explicitly specifies - as the filename in the current directory using ./.

Both show the same content, but the first relies on redirection, while the second directly accesses the file.

## Bandit Level 2 → Level 3
### Level Goal
The password for the next level is stored in a file called spaces in this filename located in the home directory

## Learnings: Handling Filenames with Spaces in Linux

## Key Points:
1. **Issue**: `cat spaces in this filename` fails because spaces split the filename into arguments.
2. **Solutions**:
   - Use escape characters (`\`) before spaces:
     ```bash
     cat spaces\ in\ this\ filename
     ```
   - Or wrap the filename in quotes:
     ```bash
     cat "spaces in this filename"
     cat 'spaces in this filename'
     ```

## Takeaway:
Always escape spaces or use quotes to handle filenames with spaces.


## Bandit Level 3 → Level 4
## Level Goal
The password for the next level is stored in a hidden file in the inhere directory.

### learning Notes: Accessing Hidden Files in Linux

## Key Points:
1. **Hidden File**: Files beginning with `.` are hidden and require specific handling.
   - Example: `...Hiding-From-You`.

2. **Commands Used**:
   - `ls`: Lists visible files.
   - `ls -al`: Displays all files, including hidden ones.
   - `cat ...Hiding-From-You`: Accesses the content of the hidden file.

3. **Example**:
   ```bash
   bandit3@bandit:~/inhere$ ls -al
   -rw-r----- 1 bandit4 bandit3   33 Sep 19 07:08 ...Hiding-From-You

   bandit3@bandit:~/inhere$ cat ...Hiding-From-You
   2WmrDFRmJIq3IPxneAaMGhap0pFhF3NJ


## Bandit Level 4 → Level 5
## Level Goal
The password for the next level is stored in the only human-readable file in the inhere directory. Tip: if your terminal is messed up, try the “reset” command.

## Notes: Handling Files with Special Characters in Linux

## Key Points:
1. **Special Characters**: Files starting with a `-` can confuse commands as they are interpreted as options.
   - Example: `-file07`.

2. **Commands Used**:
   - `file ./*`: Checks file types in the current directory.
   - `cat ./-file07`: Correctly references the file using `./` to indicate it's in the current directory.

3. **Example**:
   ```bash
   bandit4@bandit:~/inhere$ file ./*
   ./-file07: ASCII text

   bandit4@bandit:~/inhere$ cat ./-file07
   4oQYVPkxZOOEOO5pTW81FB8j8lxXGUQw



## Bandit Level 6 → Level 7
## Level Goal
The password for the next level is stored somewhere on the server and has all of the following properties

- owned by user bandit7
- owned by group bandit6
- 33 bytes in size



### Problem Requirements:
1. **File owner:** `bandit7`.
2. **Group owner:** `bandit6`.
3. **File size:** 33 bytes.
4. **Search location:** Entire server (`/`).
5. **Suppress errors:** Avoid clutter caused by permission-denied messages.

### Command Explanation:

```bash
find / -user bandit7 -group bandit6 -size 33c 2>/dev/null
```

1. **`find /`:**  
   Starts the search from the root directory (`/`), covering all files and directories on the system.

2. **`-user bandit7`:**  
   Limits the search to files owned by the user `bandit7`.

3. **`-group bandit6`:**  
   Filters further to only include files owned by the group `bandit6`.

4. **`-size 33c`:**  
   Ensures the file is exactly 33 bytes in size.  
   - `c` specifies the size in bytes.

5. **`2>/dev/null`:**  
   Redirects standard error (e.g., "Permission denied") to `/dev/null` (a "black hole" for unwanted output). This keeps the output clean and focused on the result.

---


### Example Output:
```bash
/var/lib/dpkg/info/pass.txt
```

Display the file contents:
```bash
cat /var/lib/dpkg/info/pass.txt
```

You'll get the password for the next level.


## Bandit Level 7 → Level 8
### Level Goal
The password for the next level is stored in the file data.txt next to the word millionth



### Steps:
1. **List directory contents**:
   ```bash
   ls
   ```
   Output: `data.txt`

2. **Search for the keyword "millionth"**:
   ```bash
   cat data.txt | grep millionth
   ```
   Output:
   ```
   millionth       dfwvzFQi4mU0wfNbFOe9RoWskMLg7eEc


